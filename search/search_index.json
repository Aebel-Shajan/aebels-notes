{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my notes","text":"<p>super secret notes</p>"},{"location":"javascript/scroll-minimap-for-chatgpt/","title":"Scroll Minimap for Chatgpt","text":"<p>project timeline: 25th May - 28th May</p> <p></p> <p>I made this extension because I kept getting lost during my conversations with chatgpt. Sometimes chatgpt be giving you alot of useless info you didnt ask for. Navigating through what it says and finding the useful bits can be pretty tedious. This extension aims to solve that.</p> <p>Me trying to find that one prompt on in chatgpt: </p>"},{"location":"javascript/scroll-minimap-for-chatgpt/#usage","title":"Usage","text":"<ol> <li> <p>Download the extension from [insert chrome web store link here]</p> </li> <li> <p>Restart chrome </p> </li> <li> <p>Go to chatgpt, you should see a toggle button for the minimap in the top right corner. Open the minimap by pressing this button.</p> </li> <li> <p>Ask chatgpt a message and hit refresh minimap. A condensed view of the conversation should be shown in the minimap.</p> </li> </ol>"},{"location":"javascript/scroll-minimap-for-chatgpt/#issues","title":"Issues","text":"<p>Report issues here https://github.com/Aebel-Shajan/scroll-minimap-for-chatgpt/issues</p> <ul> <li>The scaling of the conversation to the minimap is not always one to one. This can lead to the scrollbar not syncing correctly.</li> </ul>"},{"location":"javascript/scroll-minimap-for-chatgpt/#working-out","title":"Working out","text":""},{"location":"javascript/scroll-minimap-for-chatgpt/#existingsimilar-chrome-extensions","title":"Existing/similar chrome extensions","text":"<ul> <li> <p>https://github.com/Brian-Gaffney/Chrome-minimap (does not work)</p> </li> <li> <p>https://github.com/chintown/monocle (works but not for chatgpt chat)</p> </li> </ul> <p>Useful libraries:</p> <ul> <li>https://html2canvas.hertzen.com/documentation.html</li> </ul> <p>These other extensions are really cool but I found that they did not work with chatgpt. At first I tried to copy the projects and change them for chatgpt. But there was alot going on and I could not understand the logic. </p> <p>Also I looked into using react to make this but that was too complicated and would take ages to get set up. I ended up just having all the logic in one file <code>content.js</code> with around 160 lines of code.</p>"},{"location":"javascript/scroll-minimap-for-chatgpt/#wireframe","title":"Wireframe","text":""},{"location":"javascript/scroll-minimap-for-chatgpt/#why-the-minimap-doesnt-work-for-chatgpt","title":"Why the minimap doesnt work for chatgpt","text":"<p>Setting <code>sourceScrollContainer=document.body</code> and <code>sourceElements=document.body.childNodes</code> does not work.</p> <p></p> <p>Instead use this selector <code>'[data-testid^=\"conversation-turn-\"]'</code> to target chatmessages and then call <code>.parentNode</code> to get the <code>sourceElements</code>.</p> <pre><code>// Functions\nfunction getSourceElements() {\n    try {\n    // cant directly target due to uniquely identified class names\n    // so gotta hack it\n    sourceElements = document.querySelector('[data-testid^=\"conversation-turn-\"]').parentNode\n    } catch {\n        sourceElements = document.body.cloneNode(true)\n        if (sourceElements.contains(extensionContainer)) {\n            sourceElements.removeChild(extensionContainer)\n        }\n    }\n}\n</code></pre> <p>We can't target the element for <code>sourceScrollContainer</code> which handles user scrolling of elements due to uuid class name.</p> <p></p> <p>Easier to use <code>sourceElements</code> and call <code>.parentNode</code> till we get it.</p> <pre><code>function getSourceScrollContainer() {\n    try {\n        // Used to retrieve information about scroll position\n        sourceScrollContainer = sourceElements.parentNode.parentNode;\n    } catch {\n        sourceScrollContainer = document.body.cloneNode(true)\n        if (sourceElements.contains(extensionContainer)) {\n            sourceElements.removeChild(extensionContainer)\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"javascript/scroll-minimap-for-chatgpt/#scroll-bar","title":"Scroll bar","text":"<p>Aim: Get a blue rectangle overlay to appear over the minimap which shows the current location in the chat.</p> <p>In styles we set the scalling as 0.1. Therefore the targetElements are 0.1 times the sourceElements.</p> <pre><code>#minimap &gt; *{\n  transform: scale(0.1);\n  transform-origin: top left;\n  width: 1000%;\n  height: 100%\n}\n</code></pre> <p></p> <p>We want to find y (the top of the scroll bar from the top of the targetElements). </p> <p>y = 0.1 * v;</p> <pre><code>function updateScrollBar() {\n    if (sourceScrollContainer) {\n        const scrollBarTop = sourceScrollContainer.scrollTop * 0.1;\n        scrollBar.style.top = `${scrollBarTop}px`;\n    }\n}\n</code></pre> <p>(*issue with this: the text in the chat wraps differently based on how wide the minimap is. If the source elements are narrow, the target elements still remain at a fixed width of 100px.)</p>"},{"location":"javascript/scroll-minimap-for-chatgpt/#automatic-scrolling-of-minimap","title":"Automatic scrolling of minimap","text":"<p>Aims:  * We want the minimap to automatically scroll as the user scrolls through the chat. i.e. Find the value for minimap.scrollTop.  * We also want to scroll such that     * when the user has scrolled to the top the scroll bar is shown in the top of the minimap     * when the user has scrolled to the middle the scroll bar is shown in the middle of the minimap</p> <p></p> <p>From the diagram above we want to find the value for m_top. </p> \\[  m_{top} = x - s_{rel} \\] <p>We know \\(x\\) but not \\(s_{rel}\\).</p> <p>The ratio between of \\(u\\) and \\(v\\) should be the same as the ratio between \\(s_{rel}\\) and \\(m_{size}\\):</p> \\[  { s_{rel} \\over m_{size} } = { u \\over v} \\] \\[ s_{rel} = {m_{size} \\times u \\over v} \\] <p>Substitute value for \\(s_{rel}\\) and remember that \\(x=0.1 \\times u\\):</p> \\[ m_{top} = (0.1 \\times u)  - {m_{size} \\times u \\over v} \\] \\[ m_{top} = (0.1  - {m_{size}  \\over v} ) \\times u \\] <p>Putting this into code:</p> <pre><code>function updateMinimapScroll() {\n    if (sourceScrollContainer) {\n        const u = sourceScrollContainer.scrollTop\n        const v = sourceScrollContainer.scrollHeight\n        const m_size = minimap.offsetHeight \n        let minimapScrollTop = u * (0.1 - (m_size/v))\n        minimap.scrollTo(0, minimapScrollTop);\n    }\n}\n</code></pre>"},{"location":"javascript/scroll-minimap-for-chatgpt/#click-and-drag-the-scroll-bar","title":"Click and drag the scroll bar","text":"<p>I did this but I don't remember how I did it, or why it even works. </p> <pre><code>function handleScrollBarMove(mousePos) {\n    if (sourceScrollContainer) {\n        const scale = sourceScrollContainer.scrollHeight / (sourceElements.offsetHeight * 0.1);\n        const offset = scrollBar.offsetHeight * 0.5 * 0.1;\n        const sourceScrollAmount = (mousePos - minimap.getBoundingClientRect().top + minimap.scrollTop - offset) * scale;\n        sourceScrollContainer.scrollTo(0, sourceScrollAmount)\n    }\n}\n</code></pre>"},{"location":"javascript/scroll-minimap-for-chatgpt/#highlight-user-prompts","title":"Highlight user prompts","text":"<p>Aim: Make the user prompts stand out in the minimap</p> <p>I found out chat messages are the even indexed elements in targetElements. Then I changed the background color to blue. <pre><code>function colorUserChat() {\n    userChatElements = targetElements.querySelectorAll('[data-testid^=\"conversation-turn-\"]').forEach((element, index) =&gt; {\n        // odd indices are user chat messages. omg i am mega brain for figuring this out\n        if (index % 2 == 0) {\n            element.style.backgroundColor = '#00DFFF';\n        }\n    })\n}\n</code></pre></p>"},{"location":"javascript/scroll-minimap-for-chatgpt/#future-additions","title":"Future additions","text":"<ul> <li> <p>Add text input so users can select their own sourceElements using selectors.</p> </li> <li> <p>Make it work on all websites not just chatgpt.</p> </li> </ul>"},{"location":"projects/0-projects/","title":"Projects","text":""},{"location":"projects/0-projects/#future","title":"Future","text":"<ul> <li> <p>general purpose minimap for all websites</p> </li> <li> <p>contents page for multiple documentation pages</p> </li> </ul>"},{"location":"projects/0-projects/#present","title":"Present","text":"<ul> <li> <p>salamendar inverse kinematics</p> </li> <li> <p>habit tracker</p> </li> <li> <p>data dashboard from fitbit, strong, samsung fit, google fit</p> </li> </ul>"},{"location":"projects/0-projects/#past","title":"Past","text":"<ul> <li> <p>chatgpt chat scroll minimap chrome extension</p> </li> <li> <p>java spring boot, react js chatroom application</p> </li> <li> <p>subway surfers screen reader</p> </li> <li> <p>personal website</p> </li> <li> <p>three js car drifting game</p> </li> <li> <p>free code camp side panel contents extension</p> </li> <li> <p>c++ quantum circuit simulator</p> </li> </ul>"},{"location":"projects/0-projects/#in-the-void","title":"In the void","text":"<ul> <li> <p>three js + rapier js rocket league clone :(</p> </li> <li> <p>job application chrome extension</p> </li> </ul>"},{"location":"projects/habit-tracker/","title":"Habit Tracker Django React Webapp","text":""},{"location":"projects/scroll-minimap-for-chatgpt/","title":"Scroll Minimap for Chatgpt","text":"<p>project timeline: 25th May - 28th May</p> <p></p> <p>I made this extension because I kept getting lost during my conversations with chatgpt. Sometimes chatgpt be giving you alot of useless info you didnt ask for. Navigating through what it says and finding the useful bits can be pretty tedious. This extension aims to solve that.</p> <p>Me trying to find that one prompt on in chatgpt: </p>"},{"location":"projects/scroll-minimap-for-chatgpt/#usage","title":"Usage","text":"<ol> <li> <p>Download the extension from [insert chrome web store link here]</p> </li> <li> <p>Restart chrome </p> </li> <li> <p>Go to chatgpt, you should see a toggle button for the minimap in the top right corner. Open the minimap by pressing this button.</p> </li> <li> <p>Ask chatgpt a message and hit refresh minimap. A condensed view of the conversation should be shown in the minimap.</p> </li> </ol>"},{"location":"projects/scroll-minimap-for-chatgpt/#issues","title":"Issues","text":"<p>Report issues here https://github.com/Aebel-Shajan/scroll-minimap-for-chatgpt/issues</p> <ul> <li>The scaling of the conversation to the minimap is not always one to one. This can lead to the scrollbar not syncing correctly.</li> </ul>"},{"location":"projects/scroll-minimap-for-chatgpt/#working-out","title":"Working out","text":""},{"location":"projects/scroll-minimap-for-chatgpt/#existingsimilar-chrome-extensions","title":"Existing/similar chrome extensions","text":"<ul> <li> <p>https://github.com/Brian-Gaffney/Chrome-minimap (does not work)</p> </li> <li> <p>https://github.com/chintown/monocle (works but not for chatgpt chat)</p> </li> </ul> <p>Useful libraries:</p> <ul> <li>https://html2canvas.hertzen.com/documentation.html</li> </ul> <p>These other extensions are really cool but I found that they did not work with chatgpt. At first I tried to copy the projects and change them for chatgpt. But there was alot going on and I could not understand the logic. </p> <p>Also I looked into using react to make this but that was too complicated and would take ages to get set up. I ended up just having all the logic in one file <code>content.js</code> with around 160 lines of code.</p>"},{"location":"projects/scroll-minimap-for-chatgpt/#wireframe","title":"Wireframe","text":""},{"location":"projects/scroll-minimap-for-chatgpt/#why-the-minimap-doesnt-work-for-chatgpt","title":"Why the minimap doesnt work for chatgpt","text":"<p>Setting <code>sourceScrollContainer=document.body</code> and <code>sourceElements=document.body.childNodes</code> does not work.</p> <p></p> <p>Instead use this selector <code>'[data-testid^=\"conversation-turn-\"]'</code> to target chatmessages and then call <code>.parentNode</code> to get the <code>sourceElements</code>.</p> <pre><code>// Functions\nfunction getSourceElements() {\n    try {\n    // cant directly target due to uniquely identified class names\n    // so gotta hack it\n    sourceElements = document.querySelector('[data-testid^=\"conversation-turn-\"]').parentNode\n    } catch {\n        sourceElements = document.body.cloneNode(true)\n        if (sourceElements.contains(extensionContainer)) {\n            sourceElements.removeChild(extensionContainer)\n        }\n    }\n}\n</code></pre> <p>We can't target the element for <code>sourceScrollContainer</code> which handles user scrolling of elements due to uuid class name.</p> <p></p> <p>Easier to use <code>sourceElements</code> and call <code>.parentNode</code> till we get it.</p> <pre><code>function getSourceScrollContainer() {\n    try {\n        // Used to retrieve information about scroll position\n        sourceScrollContainer = sourceElements.parentNode.parentNode;\n    } catch {\n        sourceScrollContainer = document.body.cloneNode(true)\n        if (sourceElements.contains(extensionContainer)) {\n            sourceElements.removeChild(extensionContainer)\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"projects/scroll-minimap-for-chatgpt/#scroll-bar","title":"Scroll bar","text":"<p>Aim: Get a blue rectangle overlay to appear over the minimap which shows the current location in the chat.</p> <p>In styles we set the scalling as 0.1. Therefore the targetElements are 0.1 times the sourceElements.</p> <pre><code>#minimap &gt; *{\n  transform: scale(0.1);\n  transform-origin: top left;\n  width: 1000%;\n  height: 100%\n}\n</code></pre> <p></p> <p>We want to find y (the top of the scroll bar from the top of the targetElements). </p> <p>y = 0.1 * v;</p> <pre><code>function updateScrollBar() {\n    if (sourceScrollContainer) {\n        const scrollBarTop = sourceScrollContainer.scrollTop * 0.1;\n        scrollBar.style.top = `${scrollBarTop}px`;\n    }\n}\n</code></pre> <p>(*issue with this: the text in the chat wraps differently based on how wide the minimap is. If the source elements are narrow, the target elements still remain at a fixed width of 100px.)</p>"},{"location":"projects/scroll-minimap-for-chatgpt/#automatic-scrolling-of-minimap","title":"Automatic scrolling of minimap","text":"<p>Aims:  * We want the minimap to automatically scroll as the user scrolls through the chat. i.e. Find the value for minimap.scrollTop.  * We also want to scroll such that     * when the user has scrolled to the top the scroll bar is shown in the top of the minimap     * when the user has scrolled to the middle the scroll bar is shown in the middle of the minimap</p> <p></p> <p>From the diagram above we want to find the value for m_top. </p> \\[  m_{top} = x - s_{rel} \\] <p>We know \\(x\\) but not \\(s_{rel}\\).</p> <p>The ratio between of \\(u\\) and \\(v\\) should be the same as the ratio between \\(s_{rel}\\) and \\(m_{size}\\):</p> \\[  { s_{rel} \\over m_{size} } = { u \\over v} \\] \\[ s_{rel} = {m_{size} \\times u \\over v} \\] <p>Substitute value for \\(s_{rel}\\) and remember that \\(x=0.1 \\times u\\):</p> \\[ m_{top} = (0.1 \\times u)  - {m_{size} \\times u \\over v} \\] \\[ m_{top} = (0.1  - {m_{size}  \\over v} ) \\times u \\] <p>Putting this into code:</p> <pre><code>function updateMinimapScroll() {\n    if (sourceScrollContainer) {\n        const u = sourceScrollContainer.scrollTop\n        const v = sourceScrollContainer.scrollHeight\n        const m_size = minimap.offsetHeight \n        let minimapScrollTop = u * (0.1 - (m_size/v))\n        minimap.scrollTo(0, minimapScrollTop);\n    }\n}\n</code></pre>"},{"location":"projects/scroll-minimap-for-chatgpt/#click-and-drag-the-scroll-bar","title":"Click and drag the scroll bar","text":"<p>I did this but I don't remember how I did it, or why it even works. </p> <pre><code>function handleScrollBarMove(mousePos) {\n    if (sourceScrollContainer) {\n        const scale = sourceScrollContainer.scrollHeight / (sourceElements.offsetHeight * 0.1);\n        const offset = scrollBar.offsetHeight * 0.5 * 0.1;\n        const sourceScrollAmount = (mousePos - minimap.getBoundingClientRect().top + minimap.scrollTop - offset) * scale;\n        sourceScrollContainer.scrollTo(0, sourceScrollAmount)\n    }\n}\n</code></pre>"},{"location":"projects/scroll-minimap-for-chatgpt/#highlight-user-prompts","title":"Highlight user prompts","text":"<p>Aim: Make the user prompts stand out in the minimap</p> <p>I found out chat messages are the even indexed elements in targetElements. Then I changed the background color to blue. <pre><code>function colorUserChat() {\n    userChatElements = targetElements.querySelectorAll('[data-testid^=\"conversation-turn-\"]').forEach((element, index) =&gt; {\n        // odd indices are user chat messages. omg i am mega brain for figuring this out\n        if (index % 2 == 0) {\n            element.style.backgroundColor = '#00DFFF';\n        }\n    })\n}\n</code></pre></p>"},{"location":"projects/scroll-minimap-for-chatgpt/#future-additions","title":"Future additions","text":"<ul> <li> <p>Add text input so users can select their own sourceElements using selectors.</p> </li> <li> <p>Make it work on all websites not just chatgpt.</p> </li> </ul>"},{"location":"python/django/","title":"Django","text":"<p>Django docs</p> <p>Django Rest Framework docs</p>"},{"location":"python/django/#general","title":"General","text":"<ul> <li>Django is used to create static full stack server side website.</li> <li>Django rest framework is used to create apis</li> <li>Django makes use of the model, view, template design pattern.</li> <li>You can use shortcuts from django.shortcuts to cut down on code that gets repeated across multiple projects.</li> <li>You can use generic views to replace writing out views in full by hand.</li> </ul>"},{"location":"python/django/#creating-django-projects","title":"Creating Django projects","text":"<ol> <li> <p>Create the project directory <pre><code>mkdir tutorial\ncd tutorial\n</code></pre></p> </li> <li> <p>Create a virtual environment to isolate our package dependencies locally <pre><code>python3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n</code></pre></p> </li> <li> <p>Install Django and Django REST framework into the virtual environment <pre><code>pip install django\npip install djangorestframework\n</code></pre></p> </li> <li> <p>Set up a new project with a single application <pre><code>django-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\n</code></pre></p> </li> </ol>"},{"location":"python/django/#making-model-changes","title":"Making model changes","text":"<ol> <li>Change your models (in models.py).</li> <li><code>python manage.py makemigrations</code> to create migrations for those changes</li> <li><code>python manage.py migrate</code> to apply those changes to the database.</li> </ol>"},{"location":"python/django/#runserver","title":"Runserver","text":"<p><code>python manage.py runserver</code></p>"},{"location":"python/django/#admin","title":"Admin","text":"<ul> <li> <p><code>python manage.py createsuperuser</code> to create admin account</p> </li> <li> <p>Add models to admin panel by using <code>admin.site.register</code>: ```py title=polls/admin.py from django.contrib import admin from .models import Choice, Question</p> </li> </ul> <p>admin.site.register(Question) admin.site.register(Choice) ```</p>"},{"location":"python/django/#django-rest-framework","title":"Django REST framework","text":""},{"location":"python/pyspark/","title":"Pyspark","text":"<p>Following documentation from https://best-practice-and-impact.github.io/ons-spark/intro.html</p>"},{"location":"python/pyspark/#overview","title":"Overview","text":""},{"location":"python/pyspark/#sessions","title":"Sessions","text":"<ul> <li>Start a default session : <code>SparkSession.builder</code>/<code>spark_connect()</code></li> </ul> <pre><code>from pyspark.sql import SparkSession\nspark = (\n    SparkSession.builder.appName(\"default-session\")\n    .getOrCreate()\n)\n</code></pre> <ul> <li> <p>Stop sessions by using : <code>spark.stop()</code>/<code>spark_disconnect()</code></p> </li> <li> <p>Config <code>spark-defaults.conf</code> configuration file</p> </li> <li> <p>Two modes: local, cluster</p> </li> <li> <p>When using cdsw, spark config is already done for you when you launch the session.</p> </li> </ul>"},{"location":"python/pyspark/#data-types","title":"Data Types","text":"<ul> <li> <p>Types are inferred in Pyspark</p> </li> <li> <p>Import from <code>pyspark.sql.type</code> <pre><code># Structural types\nfrom pyspark.sql.types import StructType, StructField\n# String type\nfrom pyspark.sql.types import StringType\n# Numeric types\nfrom pyspark.sql.types import IntegerType, DecimalType, DoubleType\n# Date types\nfrom pyspark.sql.types import DateType, TimestampType\n</code></pre></p> </li> <li> <p>Example scheme: </p> </li> </ul> <pre><code>root\n|-- incident_number: string (nullable = true)\n|-- date_time_of_call: string (nullable = true)\n|-- cal_year: integer (nullable = true)\n|-- fin_year: string (nullable = true)\n</code></pre> <ul> <li> <p>Can read data from parquet files (scheme included) and csvs (not included, scheme inferred or provided like below) <pre><code>from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n\nrescue_schema = StructType([\nStructField(\"incident_number\", StringType()),\nStructField(\"date_time_of_call\", StringType()),\nStructField(\"cal_year\", IntegerType()),\nStructField(\"fin_year\", StringType())\n])\n</code></pre></p> </li> <li> <p>Column methods <code>.cast()</code> or <code>.astype()</code> to change type of column</p> </li> </ul>"},{"location":"python/pyspark/#create-df-manually","title":"Create DF manually","text":"<pre><code>import pandas as pd\nfrom pyspark.sql import SparkSession, functions as F\n\nspark = (SparkSession.builder.master(\"local[2]\")\n         .appName(\"create-DFs\")\n         .getOrCreate())\n\nseed_no = 100\nrandom_numbers = (spark.range(5)\n                  .withColumn(\"rand_no\", F.rand(seed_no)))\n\nrandom_numbers.show()\n</code></pre>"},{"location":"python/pyspark/#introduction-to-pyspark","title":"Introduction to Pyspark","text":"<p>PySpark DataFrames are processed on the Spark cluster. This is a big pool of linked machines, called nodes. PySpark DataFrames are distributed into partitions, and are processed in parallel on the nodes in the Spark cluster. You can have much greater memory capacity with Spark and so is suitable for big data.</p>"}]}